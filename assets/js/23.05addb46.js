(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{435:function(v,_,l){"use strict";l.r(_);var i=l(2),t=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[_("strong",[v._v("从输入 url 到渲染出页面的整个过程")])]),v._v(" "),_("ol",[_("li",[v._v("查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。")])]),v._v(" "),_("ul",[_("li",[v._v("浏览器缓存：浏览器会记录 DNS 一段时间，因此，只是第一个地方解析 DNS 请求；")]),v._v(" "),_("li",[v._v("操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的 DNS 查询缓存)；")]),v._v(" "),_("li",[v._v("路由器缓存：如果上述两个步骤均不能成功获取 DNS 记录，继续搜索路由器缓存；")]),v._v(" "),_("li",[v._v("ISP 缓存：若上述均失败，继续向 ISP 搜索。")])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("p",[v._v("DNS 域名解析：浏览器向 DNS 服务器发起请求，解析该 URL 中的域名对应的 IP 地址。DNS 服务器是基于 UDP 的，因此会用到 UDP 协议。")])]),v._v(" "),_("li",[_("p",[v._v("建立 TCP 连接：解析出 IP 地址后，根据 IP 地址和默认 80 端口，和服务器建立 TCP 连接")])]),v._v(" "),_("li",[_("p",[v._v("发起 HTTP 请求：浏览器发起读取文件的 HTTP 请求，，该请求报文作为 TCP 三次握手的第三次数据发送给服务器")])]),v._v(" "),_("li",[_("p",[v._v("服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的 html 文件发送给浏览器")])]),v._v(" "),_("li",[_("p",[v._v("关闭 TCP 连接：通过四次挥手释放 TCP 连接")])]),v._v(" "),_("li",[_("p",[v._v("浏览器渲染：客户端（浏览器）解析 HTML 内容并渲染出来，浏览器接收到数据包后的解析流程为：")])])]),v._v(" "),_("ul",[_("li",[v._v("构建 DOM 树：词法分析然后解析成 DOM 树（dom tree），是由 dom 元素及属性节点组成，树的根是 document 对象")]),v._v(" "),_("li",[v._v("构建 CSS 规则树：生成 CSS 规则树（CSS Rule Tree）")]),v._v(" "),_("li",[v._v("构建 render 树：Web 浏览器将 DOM 和 CSSOM 结合，并构建出渲染树（render tree）")]),v._v(" "),_("li",[v._v("布局（Layout）：计算出每个节点在屏幕中的位置")]),v._v(" "),_("li",[v._v("绘制（Painting）：即遍历 render 树，并使用 UI 后端层绘制每个节点。")]),v._v(" "),_("li",[v._v("JS 引擎解析过程：调用 JS 引擎执行 JS 代码（JS 的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）")])]),v._v(" "),_("ol",{attrs:{start:"8"}},[_("li",[v._v("创建 window 对象：window 对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于 window 的属性和方法，而 DOM Tree 也会映射在 window 的 doucment 对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。")])]),v._v(" "),_("ul",[_("li",[v._v("加载文件：完成 js 引擎分析它的语法与词法是否合法，如果合法进入预编译")]),v._v(" "),_("li",[v._v("预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为 window 的属性加入到 window 对象中，并给变量赋值为'undefined'；寻找全局函数声明，把它作为 window 的方法加入到 window 对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在 ES6 中已经解决了，函数提升还存在。")]),v._v(" "),_("li",[v._v("解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在 ES5 非严格模式下这个变量会成为 window 的一个属性，也就是成为全局变量。string、int 这样的值就是直接把值放在变量的存储空间里，object 对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS 作用域其实就是这样的执行流机制实现的。")])]),v._v(" "),_("p",[_("strong",[v._v("性能优化方案")]),v._v("\n一、加载优化：")]),v._v(" "),_("ol",[_("li",[v._v("减少资源体积：压缩代码。")]),v._v(" "),_("li",[v._v("减少访问次数 ∶ 合并代码、SSR 服务器端渲染、緩存。")]),v._v(" "),_("li",[v._v("使用更快的网络：CDN。")])]),v._v(" "),_("p",[v._v("二、渲染优化：")]),v._v(" "),_("ol",[_("li",[v._v("对 DOM 查询进行缓存。")]),v._v(" "),_("li",[v._v("节流 throttle 防抖 debounce。")]),v._v(" "),_("li",[v._v("懒加载")]),v._v(" "),_("li",[v._v("频繁 DOM 操作，合并到一起插入 DOM 结构。")]),v._v(" "),_("li",[v._v("CSS 放在 head，JS 放在 body 最下面。")]),v._v(" "),_("li",[v._v("尽早开始执行 JS，用 DOMContentloaded 触发。")])])])}),[],!1,null,null,null);_.default=t.exports}}]);