(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{436:function(t,a,v){"use strict";v.r(a);var _=v(2),i=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("前端工程化是代码的自动化构建、打包、测试及部署，从而提高开发效率、减少不必要的重复工作时间、减少人为失误，提高软件质量。涉及了项目构建、代码开发、分支管理、自动化测试、持续集成、项目部署、性能等内容。主要体现为“模块化、组件化、规范化、自动化” 等多个方面。")]),t._v(" "),a("h3",{attrs:{id:"模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[t._v("#")]),t._v(" 模块化")]),t._v(" "),a("p",[t._v("项目按照其功能/业务拆分成相互独立的模块。每个模块只包含与其功能相关的内容，各个模块间只能通过特定的接口进行交互，降低模块间的耦合。 模块化的好处是可以实现关注点分离，一个模块负责一个单独的功能点，这样方便重用和维护")]),t._v(" "),a("h3",{attrs:{id:"组件化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),a("p",[t._v("组件化是为了解决项目代码重复问题，将其拆分成多个独立的组件给不同的功能使用，提高系统的代码重用（复用）性和易维护性")]),t._v(" "),a("h3",{attrs:{id:"规范化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规范化"}},[t._v("#")]),t._v(" 规范化")]),t._v(" "),a("p",[t._v("规范是团队基本约定的内容,必须严格遵循,旨在增强团队开发协作、提高代码质量。")]),t._v(" "),a("ol",[a("li",[t._v("目录结构 (约定俗称)")]),t._v(" "),a("li",[t._v("编码规范[HTML、CSS、JS、图片、命名等规范] (eslint、prettier)")]),t._v(" "),a("li",[t._v("前后端接口规范 (Swagger RESTful)")]),t._v(" "),a("li",[t._v("组件文档规范")]),t._v(" "),a("li",[t._v("Git 分支管理 (Git Flow )")]),t._v(" "),a("li",[t._v("Commit 描述规范 (Commitizen)")]),t._v(" "),a("li",[t._v("设计规范 (Material Design、Ant Design)")])]),t._v(" "),a("h3",{attrs:{id:"自动化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动化"}},[t._v("#")]),t._v(" 自动化")]),t._v(" "),a("p",[t._v("工作流程内容标准化，通过工具实现全/半自动化完成重复的工作，减少人的操作,实现标准统一、高质量交付。")]),t._v(" "),a("ol",[a("li",[t._v("文件构建 (webpack)")]),t._v(" "),a("li",[t._v("持续集成/构建/部署 (Travis CI)")]),t._v(" "),a("li",[t._v("自动化测试 (Jasmine、Mocha+chai、Jest)")])])])}),[],!1,null,null,null);a.default=i.exports}}]);